"use client";
import { useEffect, useState } from 'react';
import { useCurrencyStore } from '@/lib/currencyManager';
import { useRouter } from 'next/navigation';

export default function AdminDashboard() {
  // --- Basic state for admin dashboard ---
  const [isAdmin, setIsAdmin] = useState(false);
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [selectedPage, setSelectedPage] = useState('dashboard');
  const [stats, setStats] = useState({
    totalFlights: 0,
    totalAirlines: 0,
    totalLocations: 0,
    totalBookings: 0,
    totalRevenue: 0,
    totalFlightValue: 0,
    totalUsers: 0,
    users: [] as any[],
  });
  // --- Location and Flight related state ---
  const [locations, setLocations] = useState<any[]>([]);
  const [flights, setFlights] = useState<any[]>([]);
  const [selectedFlight, setSelectedFlight] = useState<any>(null);
  const [showFlightModal, setShowFlightModal] = useState(false);
  
  // --- Payment related state ---
  const [payments, setPayments] = useState<any[]>([]);
  const [paymentsLoading, setPaymentsLoading] = useState(false);
  const [selectedPayment, setSelectedPayment] = useState<any>(null);
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const [paymentActionLoading, setPaymentActionLoading] = useState(false);
  const [paymentActionError, setPaymentActionError] = useState('');
  const [paymentActionSuccess, setPaymentActionSuccess] = useState('');
  
  // --- Location management state ---
  const [locationForm, setLocationForm] = useState({ city: '', country: '', error: '', success: '', submitting: false });
  const [showLocationModal, setShowLocationModal] = useState(false);
  const [editLocation, setEditLocation] = useState<any>(null);
      setShowAirlineModal(false);
      setEditAirline(null);
      // Refresh airlines list
      const refreshed = await fetch('/api/airlines');
      setAirlines(await refreshed.json() || []);
    } catch (err: any) {
      setAirlineForm(f => ({ ...f, error: err.message || 'Failed to save airline', submitting: false }));
    }
  };

  const handleDeleteAirline = async (id: any) => {
    if (!window.confirm('Are you sure you want to delete this airline?')) return;
    try {
      const res = await fetch(`/api/airlines/${id}`, { method: 'DELETE' });
      if (!res.ok) throw new Error(await res.text());
      // Refresh airlines list
      const refreshed = await fetch('/api/airlines');
      setAirlines(await refreshed.json() || []);
    } catch (err: any) {
      alert(err.message || 'Failed to delete airline');
    }
  };
        {selectedPage === 'airlines' && (
          <div className="p-8">
            {/* DEBUG: Render log for Manage Airlines page */}
            {(() => {
              console.log('[DEBUG] Manage Airlines page rendering');
              console.log('[DEBUG] airlines state:', airlines);
              console.log('[DEBUG] showAirlineModal:', showAirlineModal, 'editAirline:', editAirline);
              return null;
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-white text-2xl font-bold">Manage Airlines</h2>
              <button
                className="bg-[#cd7e0f] text-white px-4 py-2 rounded-lg font-semibold hover:bg-[#cd7e0f]/90 transition"
                onClick={() => {
// ...existing code...
                  console.log('[DEBUG] Add Airline button clicked');
                  setEditAirline(null);
                  setAirlineForm({ name: '', error: '', success: '', submitting: false });
                  setAirlineLogoFile(null);
                  setShowAirlineModal(true);
                }}
              >Add Airline</button>
            </div>
            <div className="space-y-4">
              {/* Fallback if airlines is not an array */}
              {!Array.isArray(airlines) ? (
                <div className="text-red-500 text-lg">Error: airlines data is not an array.</div>
              ) : airlines.length === 0 ? (
                <div className="text-gray-300 text-lg">No airlines found.</div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full bg-[#442743] rounded-lg">
                    <thead>
                      <tr className="text-white text-left">
                        <th className="py-2 px-4">Name</th>
                        <th className="py-2 px-4">Logo</th>
                        <th className="py-2 px-4">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {airlines.map((airline: any) => (
                        <tr key={airline.id} className="border-b border-[#18176b] text-white">
                          <td className="py-2 px-4">{airline.name}</td>
                          <td className="py-2 px-4">
                            {airline.logo_url ? (
                              <img src={airline.logo_url} alt={airline.name} className="h-8 w-8 object-contain rounded" />
                            ) : (
                              <span className="text-gray-400">No logo</span>
                            )}
                          </td>
                          <td className="py-2 px-4 flex gap-2">
                            <button
                              className="bg-[#cd7e0f] text-white px-3 py-1 rounded hover:bg-[#cd7e0f]/90"
                              onClick={() => {
                                console.log('[DEBUG] Edit Airline button clicked:', airline);
                                setEditAirline(airline);
                                setAirlineForm({ name: airline.name, error: '', success: '', submitting: false });
                                setAirlineLogoFile(null);
                                setShowAirlineModal(true);
                              }}
                            >Edit</button>
                            <button
                              className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                              onClick={() => {
                                console.log('[DEBUG] Delete Airline button clicked:', airline.id);
                                handleDeleteAirline(airline.id);
                              }}
                            >Delete</button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        )}

  // --- Create Flight State and Logic ---
  const [createFlight, setCreateFlight] = useState({
    passengerName: "",
    flightNumber: "",
    airlineId: "",
    departureId: "",
    arrivalId: "",
    date: "",
    time: "",
    price: "",
    trip: "One-way",
    tourType: "Economy",
    passengerClass: "1 Passenger, Economy",
    error: "",
    success: "",
    submitting: false
  });

  const handleCreateFlight = async (e: any) => {
    e.preventDefault();
    setCreateFlight(f => ({...f, error: "", success: "", submitting: true}));
    // Generate tracking number
    const trackingNumber = Math.random().toString(36).substring(2, 10).toUpperCase();
    try {
      const res = await fetch('/api/flights', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          flight_number: createFlight.flightNumber,
          airline_id: createFlight.airlineId,
          departure_location_id: createFlight.departureId,
          arrival_location_id: createFlight.arrivalId,
          date: createFlight.date,
          time: createFlight.time,
          price: Number(createFlight.price),
          tracking_number: trackingNumber,
          ticket_url: null,
          trip: createFlight.trip,
          tour_type: createFlight.tourType,
          passenger_class: createFlight.passengerClass,
          passenger_name: createFlight.passengerName
        })
      });
      if (!res.ok) {
        const data = await res.json();
        throw new Error(data.error || 'Failed to create flight');
      }
      setCreateFlight(f => ({
        ...f,
        success: 'Flight created successfully!',
        error: '',
        submitting: false,
        passengerName: '',
        flightNumber: '',
        airlineId: '',
        departureId: '',
        arrivalId: '',
        date: '',
        time: '',
        price: '',
        trip: 'One-way',
        tourType: 'Economy',
        passengerClass: '1 Passenger, Economy'
      }));
    } catch (err: any) {
      setCreateFlight(f => ({...f, error: err.message || 'An error occurred', submitting: false}));
    }
  };

  // DEBUG LOGS
  console.log('[DEBUG] isAdmin:', isAdmin);
  console.log('[DEBUG] user:', user);
  console.log('[DEBUG] loading:', loading);
  console.log('[DEBUG] stats:', stats);

  const [cryptoWallets, setCryptoWallets] = useState<any[]>([]);
  const [showWalletModal, setShowWalletModal] = useState(false);
  const [newWallet, setNewWallet] = useState({ name: '', address: '', network: '' });
  const [qrFile, setQrFile] = useState<File | null>(null);
  const [walletLoading, setWalletLoading] = useState(false);
  const [walletError, setWalletError] = useState('');
  const [walletSuccess, setWalletSuccess] = useState('');
  const router = useRouter();
  const { formatPrice } = useCurrencyStore();


  // Move fetchCryptoWallets above useEffect to avoid initialization error
  const fetchCryptoWallets = async () => {
    try {
      const res = await fetch('/api/crypto-wallets');
      const data = await res.json();
      setCryptoWallets(Array.isArray(data) ? data : []);
    } catch (e) {
      setCryptoWallets([]);
    }
  };

  useEffect(() => {
    // Read user info from cookie
    const cookie = document.cookie.split('; ').find(row => row.startsWith('user='));
    if (!cookie) {
      router.replace('/login');
      return;
    }
    try {
      const userObj = JSON.parse(decodeURIComponent(cookie.split('=')[1]));
      setUser(userObj);
      if (userObj.role !== 'admin') {
        router.replace('/search');
        return;
      }
      setIsAdmin(true);
    } catch {
      router.replace('/login');
      return;
    }
    fetchDashboardStats();
    fetchCryptoWallets();
    setLoading(false);
    // eslint-disable-next-line
  }, [router]);

  const handleAddWallet = async (e: any) => {
    e.preventDefault();
    setWalletLoading(true);
    setWalletError('');
    setWalletSuccess('');
    if (!newWallet.name || !newWallet.address || !newWallet.network || !qrFile) {
      setWalletError('All fields are required.');
      setWalletLoading(false);
      return;
    }
    try {
      const formData = new FormData();
      formData.append('name', newWallet.name);
      formData.append('address', newWallet.address);
      formData.append('network', newWallet.network);
      formData.append('qr_code', qrFile);
      const res = await fetch('/api/crypto-wallets', {
        method: 'POST',
        body: formData,
      });
      if (!res.ok) throw new Error(await res.text());
      setWalletSuccess('Wallet added successfully!');
      setNewWallet({ name: '', address: '', network: '' });
      setQrFile(null);
      setShowWalletModal(false);
      fetchCryptoWallets();
    } catch (err: any) {
      setWalletError(err.message || 'Failed to add wallet');
    }
    setWalletLoading(false);
  };

  const fetchDashboardStats = async () => {
    try {
      // Fetch stats from custom API routes (replace with your own endpoints)
      // Fetch flights, airlines, locations, users as before
      const flightsRes = await fetch('/api/flights');
      const airlinesRes = await fetch('/api/airlines');
      const locationsRes = await fetch('/api/locations');
      const usersRes = await fetch('/api/users');
      const paymentsRes = await fetch('/api/payments?status=approved');

      const flights = await flightsRes.json();
      const airlines = await airlinesRes.json();
      const locations = await locationsRes.json();
      const users = await usersRes.json();
      const payments = await paymentsRes.json();

      const safeFlights = flights || [];
      const safeUsers = users || [];
      const safePayments = Array.isArray(payments) ? payments : [];

      // DEBUG: Log payments array for troubleshooting
      console.log('[DEBUG] Dashboard payments:', safePayments);

      // Calculate total revenue from approved payments
      const totalRevenue = safePayments.reduce((sum: number, p: any) => {
        let amount = 0;
        if (typeof p.amount === 'number') {
          amount = p.amount;
        } else if (typeof p.amount === 'string') {
          amount = parseFloat(p.amount.trim());
        }
        return sum + (isNaN(amount) ? 0 : amount);
      }, 0);

      const totalFlightValue = safeFlights.reduce((sum: number, f: any) => {
        let price = f.price;
        if (price == null || price === '') return sum;
        let num = 0;
        if (typeof price === 'string') {
          num = parseFloat(price.trim());
        } else if (typeof price === 'number') {
          num = price;
        } else {
          num = parseFloat(String(price).trim());
        }
        return sum + (isNaN(num) ? 0 : num);
      }, 0);

      setStats({
        totalFlights: safeFlights.length,
        totalAirlines: airlines.length || 0,
        totalLocations: locations.length || 0,
        totalBookings: 0, // Not used for revenue now
        totalRevenue: totalRevenue,
        totalFlightValue: totalFlightValue,
        totalUsers: safeUsers.length,
        users: safeUsers,
      });
    } catch (error) {
      console.error('Error fetching stats:', error);
    }
  };

  const handleSignOut = async () => {
    await fetch('/api/logout', { method: 'POST' });
    window.location.href = '/';
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex items-center justify-center">
    <div className="relative flex min-h-screen flex-col bg-[#18176b] font-sans overflow-x-hidden">
      <div className="flex h-full grow flex-row">
        {/* Sidebar */}
        <aside className="flex flex-col w-80 min-h-screen bg-[#18176b] p-4 justify-between border-r-4 border-gradient-to-b from-[#cd7e0f] via-[#d18a27] to-[#cd7e0f] shadow-lg relative">
          <div className="absolute inset-y-0 right-0 w-1 bg-gradient-to-b from-[#cd7e0f] via-[#d18a27] to-[#cd7e0f]"></div>
          <div className="flex flex-col gap-4">
            <h1 className="text-white text-base font-medium">Welcome</h1>
            <nav className="flex flex-col gap-2">
              {/* ...sidebar buttons... */}
            </nav>
          </div>
        </aside>

        {/* Main Content */}
        <main className="flex flex-col flex-1 max-w-[960px] mx-auto">
          {/* Fallback message for blank page troubleshooting */}
          <div className="bg-yellow-100 text-yellow-800 p-4 mb-4 rounded">If you see this message, the main content is rendering. If the page is still blank, a runtime error may be occurring below.</div>
          {/* Error boundary for runtime errors in JSX */}
          {(() => {
            try {
              return (
                <div>
                  {selectedPage === 'dashboard' && (
                    <div className="flex flex-col">
                      <div className="flex flex-wrap justify-between gap-3 p-4">
                        <p className="text-white tracking-light text-[32px] font-bold leading-tight min-w-72">Dashboard</p>
                      </div>
                      <div className="flex flex-wrap gap-4 p-4">
                        <div className="flex min-w-[158px] flex-1 flex-col gap-2 rounded-lg p-6 bg-[#442743]">
                          <p className="text-white text-base font-medium">Total Bookings</p>
                          <p className="text-white tracking-light text-2xl font-bold">{stats.totalBookings}</p>
                        </div>
                        <div className="flex min-w-[158px] flex-1 flex-col gap-2 rounded-lg p-6 bg-[#442743]">
                          <p className="text-white text-base font-medium">Total Revenue</p>
                          <p className="text-white tracking-light text-2xl font-bold">{formatPrice(stats.totalRevenue)}</p>
                        </div>
                        <div className="flex min-w-[158px] flex-1 flex-col gap-2 rounded-lg p-6 bg-[#442743]">
                          <p className="text-white text-base font-medium">Total Flight Value</p>
                          <p className="text-white tracking-light text-2xl font-bold">{formatPrice(stats.totalFlightValue)}</p>
                        </div>
                        <div className="flex min-w-[158px] flex-1 flex-col gap-2 rounded-lg p-6 bg-[#442743]">
                          <p className="text-white text-base font-medium">Total Users</p>
                          <p className="text-white tracking-light text-2xl font-bold">{stats.totalUsers}</p>
                        </div>
                      </div>
                    </div>
                  )}
                  {selectedPage === 'createdFlights' && (
                    <div className="p-8">
                      {/* ...created flights table... */}
                    </div>
                  )}
                  {selectedPage === 'createFlight' && (
                    <div className="p-8">
                      {/* ...create flight form... */}
                    </div>
                  )}
                  {selectedPage === 'approvePayments' && (
                    <div className="p-8">
                      {/* ...approve payments table... */}
                    </div>
                  )}
                  {selectedPage === 'cryptoWallets' && (
                    <div className="p-8">
                      {/* ...crypto wallets... */}
                    </div>
                  )}
                  {selectedPage === 'integrations' && (
                    <div className="p-8">
                      {/* ...integrations... */}
                    </div>
                  )}
                  {selectedPage === 'locations' && (
                    <div className="p-8">
                      {/* ...manage locations... */}
                    </div>
                  )}
                  {selectedPage === 'airlines' && (
                    <div className="p-8">
                      {/* ...manage airlines... */}
                    </div>
                  )}
                  {/* ...modals... */}
                </div>
              );
            } catch (err: any) {
              return <div className="bg-red-100 text-red-700 p-8">Error rendering page: {err?.message || 'Unknown error'}</div>;
            }
          })()}
        </main>
      </div>
      {/* ...modals outside main... */}
    </div>
                      </div>
                    )}
                    {selectedPage === 'integrations' && (
                      <div className="p-8">
                        {/* ...integrations... */}
                      </div>
                    )}
                    {selectedPage === 'locations' && (
                      <div className="p-8">
                        {/* ...manage locations... */}
                      </div>
                    )}
                    {selectedPage === 'airlines' && (
                      <div className="p-8">
                        {/* ...manage airlines... */}
                      </div>
                    )}
                    {/* ...modals... */}
// ...existing code...
            {selectedPage === 'createdFlights' && (
              <div className="p-8">
                <h2 className="text-white text-2xl font-bold mb-6">Created Flights</h2>
                {flights.length === 0 ? (
                  <div className="text-gray-300 text-lg">No flights found.</div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full bg-[#442743] rounded-lg">
                      <thead>
                        <tr className="text-white text-left">
                          <th className="py-2 px-4">Flight #</th>
                          <th className="py-2 px-4">Airline</th>
                          <th className="py-2 px-4">Departure</th>
                          <th className="py-2 px-4">Arrival</th>
                          <th className="py-2 px-4">Price</th>
                          <th className="py-2 px-4">Status</th>
                        </tr>
                      </thead>
                      <tbody>
                        {flights.map((flight: any) => (
                          <tr
                            key={flight.id}
                            className="border-b border-[#18176b] text-white cursor-pointer hover:bg-[#cd7e0f]/20 transition"
                            onClick={() => {
                              setSelectedFlight(flight);
                              setShowFlightModal(true);
                            }}
                          >
                            <td className="py-2 px-4">{flight.flight_number || flight.id}</td>
                            <td className="py-2 px-4">{flight.airline_name || flight.airline_id}</td>
                            <td className="py-2 px-4">{flight.departure_country || flight.departure_location || '-'}</td>
                            <td className="py-2 px-4">{flight.arrival_country || flight.arrival_location || '-'}</td>
                            <td className="py-2 px-4">{formatPrice(flight.price)}</td>
                            <td className="py-2 px-4">{flight.status || '-'}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            )}
            {selectedPage === 'createFlight' && (
              <div className="p-8">
                <div className="max-w-2xl mx-auto bg-white rounded-xl shadow-xl p-8">
                  <h2 className="text-2xl font-bold text-[#4f1032] mb-6">Create New Flight</h2>
                  <form onSubmit={handleCreateFlight} className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Passenger Name *</label>
                        <input type="text" value={createFlight.passengerName} onChange={e => setCreateFlight(f => ({...f, passengerName: e.target.value}))} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Flight Number *</label>
                        <input type="text" value={createFlight.flightNumber} onChange={e => setCreateFlight(f => ({...f, flightNumber: e.target.value}))} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Airline *</label>
                        <select value={createFlight.airlineId} onChange={e => setCreateFlight(f => ({...f, airlineId: e.target.value}))} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required>
                          <option value="">Select Airline</option>
                          {airlines.map(a => <option key={a.id} value={a.id}>{a.name}</option>)}
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Departure Location *</label>
                        <select value={createFlight.departureId} onChange={e => setCreateFlight(f => ({...f, departureId: e.target.value}))} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required>
                          <option value="">Select Departure Location</option>
                          {locations.map(l => <option key={l.id} value={l.id}>{l.city}, {l.country}</option>)}
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Arrival Location *</label>
                        <select value={createFlight.arrivalId} onChange={e => setCreateFlight(f => ({...f, arrivalId: e.target.value}))} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required>
                          <option value="">Select Arrival Location</option>
                          {locations.map(l => <option key={l.id} value={l.id}>{l.city}, {l.country}</option>)}
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Date *</label>
                        <input type="date" value={createFlight.date} onChange={e => setCreateFlight(f => ({...f, date: e.target.value}))} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required />
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Time *</label>
                        <input type="time" value={createFlight.time} onChange={e => setCreateFlight(f => ({...f, time: e.target.value}))} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required />
                      </div>
                      <div className="md:col-span-2">
                        <label className="block text-sm font-medium text-gray-700 mb-2">Price ($) *</label>
                        <input type="number" min="0" step="0.01" value={createFlight.price} onChange={e => setCreateFlight(f => ({...f, price: e.target.value}))} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required />
                      </div>
                    </div>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Trip</label>
                        <select value={createFlight.trip} onChange={e => setCreateFlight(f => ({...f, trip: e.target.value}))} className="w-full p-3 border rounded text-gray-900">
                          <option>One-way</option>
                          <option>Round-Trip</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Tour type</label>
                        <select value={createFlight.tourType} onChange={e => setCreateFlight(f => ({...f, tourType: e.target.value}))} className="w-full p-3 border rounded text-gray-900">
                          <option>Economy</option>
                          <option>Business</option>
                          <option>First Class</option>
                        </select>
                      </div>
                      <div>
                        <label className="block text-sm font-medium text-gray-700 mb-2">Passenger/ Class</label>
                        <select value={createFlight.passengerClass} onChange={e => setCreateFlight(f => ({...f, passengerClass: e.target.value}))} className="w-full p-3 border rounded text-gray-900">
                          <option>1 Passenger, Economy</option>
                          <option>2 Passengers, Economy</option>
                          <option>1 Passenger, Business</option>
                        </select>
                      </div>
                    </div>
                    {createFlight.error && <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">{createFlight.error}</div>}
                    {createFlight.success && <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg">{createFlight.success}</div>}
                    <div className="flex gap-4 pt-6">
                      <button type="submit" className="flex-1 bg-[#cd7e0f] text-white py-3 rounded-lg font-semibold hover:bg-[#cd7e0f]/90 transition disabled:opacity-50 disabled:cursor-not-allowed" disabled={createFlight.submitting}>
                        {createFlight.submitting ? "Creating Flight..." : "Create Flight"}
                      </button>
                      <button type="button" onClick={() => setSelectedPage('dashboard')} className="px-8 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition">Cancel</button>
                    </div>
                  </form>
                </div>
              </div>
            )}
            {selectedPage === 'approvePayments' && (
              <div className="p-8">
                <h2 className="text-white text-2xl font-bold mb-6">Approve Payments</h2>
                {paymentsLoading ? (
                  <div className="text-gray-300 text-lg">Loading payments...</div>
                ) : payments.length === 0 ? (
                  <div className="text-gray-300 text-lg">No pending payments found.</div>
                ) : (
                  <div className="overflow-x-auto">
                    <table className="min-w-full bg-[#442743] rounded-lg">
                      <thead>
                        <tr className="text-white text-left">
                          <th className="py-2 px-4">Payment ID</th>
                          <th className="py-2 px-4">Booking ID</th>
                          <th className="py-2 px-4">Amount</th>
                          <th className="py-2 px-4">Wallet</th>
                          <th className="py-2 px-4">Proof</th>
                          <th className="py-2 px-4">Status</th>
                          <th className="py-2 px-4">Actions</th>
                        </tr>
                      </thead>
                      <tbody>
                        {payments.map((payment: any) => (
                          <tr key={payment.id} className="border-b border-[#18176b] text-white">
                            <td className="py-2 px-4">{payment.id}</td>
                            <td className="py-2 px-4">{payment.booking_id}</td>
                            <td className="py-2 px-4">{formatPrice(payment.amount)}</td>
                            <td className="py-2 px-4">{payment.wallet_name || payment.wallet_id}</td>
                            <td className="py-2 px-4">
                              {payment.proof_url ? (
                                <a href={payment.proof_url} target="_blank" rel="noopener noreferrer" className="underline text-[#cd7e0f]">View</a>
                              ) : '-'}
                            </td>
                            <td className="py-2 px-4">{payment.status}</td>
                            <td className="py-2 px-4">
                              <button
                                className="bg-[#cd7e0f] text-white px-3 py-1 rounded hover:bg-[#cd7e0f]/90 mr-2"
                                onClick={() => { setSelectedPayment(payment); setShowPaymentModal(true); }}
                              >Details</button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                )}
              </div>
            )}
        {/* Payment Details Modal */}
        {showPaymentModal && selectedPayment && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
            <div className="bg-white rounded-xl shadow-2xl p-8 w-full max-w-lg relative">
              <button
                className="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-2xl font-bold"
                onClick={() => setShowPaymentModal(false)}
                aria-label="Close"
              >
                &times;
              </button>
              <h2 className="text-2xl font-bold text-[#4f1032] mb-4">Payment Details</h2>
              <div className="space-y-2 mb-4">
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Payment ID:</span>
                  <span className="text-gray-900">{selectedPayment.id}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Booking ID:</span>
                  <span className="text-gray-900">{selectedPayment.booking_id}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Amount:</span>
                  <span className="text-gray-900">{formatPrice(selectedPayment.amount)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Wallet:</span>
                  <span className="text-gray-900">{selectedPayment.wallet_name || selectedPayment.wallet_id}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Status:</span>
                  <span className="text-gray-900">{selectedPayment.status}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Proof:</span>
                  <span className="text-gray-900">
                    {selectedPayment.proof_url ? (
                      <a href={selectedPayment.proof_url} target="_blank" rel="noopener noreferrer" className="underline text-[#cd7e0f]">View Proof</a>
                    ) : '-'}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Created At:</span>
                  <span className="text-gray-900">{selectedPayment.created_at || '-'}</span>
                </div>
              </div>
              {paymentActionError && <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-2 rounded mb-2">{paymentActionError}</div>}
              {paymentActionSuccess && <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-2 rounded mb-2">{paymentActionSuccess}</div>}
              <div className="flex gap-4 pt-2">
                <button
                  className="flex-1 bg-[#cd7e0f] text-white py-2 rounded-lg font-semibold hover:bg-[#cd7e0f]/90 transition disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={paymentActionLoading}
                  onClick={() => handleApprovePayment(selectedPayment.id)}
                >{paymentActionLoading ? 'Approving...' : 'Approve'}</button>
                <button
                  className="flex-1 bg-gray-300 text-gray-700 py-2 rounded-lg font-semibold hover:bg-gray-400 transition disabled:opacity-50 disabled:cursor-not-allowed"
                  disabled={paymentActionLoading}
                  onClick={() => handleRejectPayment(selectedPayment.id)}
                >{paymentActionLoading ? 'Rejecting...' : 'Reject'}</button>
              </div>
            </div>
          </div>
        )}
        {selectedPage === 'cryptoWallets' && (
          <div className="p-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-white text-2xl font-bold">Crypto Wallets</h2>
              <button
                className="bg-[#cd7e0f] text-white px-4 py-2 rounded-lg font-semibold hover:bg-[#cd7e0f]/90 transition"
                onClick={() => setShowWalletModal(true)}
              >Add Wallet</button>
            </div>
            <div className="space-y-4">
              {cryptoWallets.length === 0 ? (
                <div className="text-gray-300 text-lg">No wallets found.</div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {cryptoWallets.map(wallet => (
                    <div key={wallet.id} className="bg-[#442743] rounded-lg p-6 flex flex-col gap-2">
                      <span className="font-bold text-[#cd7e0f] text-lg">{wallet.name}</span>
                      <span className="text-white text-sm">Network: {wallet.network}</span>
                      <span className="text-white text-sm break-all">Address: {wallet.address || wallet.wallet_address}</span>
                      {wallet.qr_code_url && (
                        <img src={wallet.qr_code_url} alt="QR Code" className="w-20 h-20 object-contain mt-2" />
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        )}
        {selectedPage === 'integrations' && (
          <div className="p-8">
            <h2 className="text-white text-2xl font-bold mb-6">Integrations</h2>
            <div className="bg-[#442743] rounded-lg p-6 mb-6">
              <p className="text-white text-base mb-2">Connect your admin dashboard to external services for payments, notifications, and more.</p>
              <ul className="space-y-4">
                {/* Example integrations, replace with real data if available */}
                <li className="flex items-center justify-between">
                  <div>
                    <span className="font-bold text-[#cd7e0f]">Stripe Payments</span>
                    <span className="ml-2 text-xs text-gray-300">(Payment Gateway)</span>
                  </div>
                  <button className="bg-[#cd7e0f] text-white px-4 py-2 rounded-lg font-semibold hover:bg-[#cd7e0f]/90 transition">Connect</button>
                </li>
                <li className="flex items-center justify-between">
                  <div>
                    <span className="font-bold text-[#cd7e0f]">Twilio SMS</span>
                    <span className="ml-2 text-xs text-gray-300">(Notifications)</span>
                  </div>
                  <button className="bg-gray-200 text-gray-700 px-4 py-2 rounded-lg font-semibold hover:bg-gray-300 transition">Disconnect</button>
                </li>
                <li className="flex items-center justify-between">
                  <div>
                    <span className="font-bold text-[#cd7e0f]">SendGrid Email</span>
                    <span className="ml-2 text-xs text-gray-300">(Email Service)</span>
                  </div>
                  <button className="bg-[#cd7e0f] text-white px-4 py-2 rounded-lg font-semibold hover:bg-[#cd7e0f]/90 transition">Connect</button>
                </li>
              </ul>
            </div>
            <div className="bg-white rounded-lg shadow p-6">
              <h3 className="text-[#4f1032] font-bold text-lg mb-2">Integration Instructions</h3>
              <ul className="list-disc pl-6 text-gray-700 text-sm space-y-2">
                <li>Click "Connect" to link your dashboard to a service. You may need API keys or credentials.</li>
                <li>Click "Disconnect" to remove an integration.</li>
                <li>For payment gateways, ensure you have configured your merchant account.</li>
                <li>For notifications, set up your sender phone/email in the service dashboard.</li>
              </ul>
            </div>
          </div>
        )}
        {selectedPage === 'locations' && (
          <div className="p-8">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-white text-2xl font-bold">Manage Locations</h2>
              <button
                className="bg-[#cd7e0f] text-white px-4 py-2 rounded-lg font-semibold hover:bg-[#cd7e0f]/90 transition"
                onClick={() => { setEditLocation(null); setLocationForm({ city: '', country: '', error: '', success: '', submitting: false }); setShowLocationModal(true); }}
              >Add Location</button>
            </div>
            <div className="space-y-4">
              {locations.length === 0 ? (
                <div className="text-gray-300 text-lg">No locations found.</div>
              ) : (
                <div className="overflow-x-auto">
                  <table className="min-w-full bg-[#442743] rounded-lg">
                    <thead>
                      <tr className="text-white text-left">
                        <th className="py-2 px-4">City</th>
                        <th className="py-2 px-4">Country</th>
                        <th className="py-2 px-4">Actions</th>
                      </tr>
                    </thead>
                    <tbody>
                      {locations.map((loc: any) => (
                        <tr key={loc.id} className="border-b border-[#18176b] text-white">
                          <td className="py-2 px-4">{loc.city}</td>
                          <td className="py-2 px-4">{loc.country}</td>
                          <td className="py-2 px-4 flex gap-2">
                            <button
                              className="bg-[#cd7e0f] text-white px-3 py-1 rounded hover:bg-[#cd7e0f]/90"
                              onClick={() => { setEditLocation(loc); setLocationForm({ city: loc.city, country: loc.country, error: '', success: '', submitting: false }); setShowLocationModal(true); }}
                            >Edit</button>
                            <button
                              className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600"
                              onClick={() => handleDeleteLocation(loc.id)}
                            >Delete</button>
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              )}
            </div>
          </div>
        )}
        {/* Manage Locations Modal */}
        {showLocationModal && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
            <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md relative flex flex-col">
              <button
                className="absolute top-4 right-4 text-gray-400 hover:text-[#cd7e0f] text-3xl font-bold focus:outline-none"
                onClick={() => { setShowLocationModal(false); setEditLocation(null); setLocationForm({ city: '', country: '', error: '', success: '', submitting: false }); }}
                aria-label="Close"
              >
                &times;
              </button>
              <h2 className="text-2xl font-bold text-[#4f1032] mb-6 text-center">{editLocation ? 'Edit Location' : 'Add Location'}</h2>
              <form onSubmit={handleLocationSubmit} className="space-y-5 mb-8">
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">City</label>
                  <input type="text" name="city" value={locationForm.city} onChange={handleLocationFormChange} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required />
                </div>
                <div>
                  <label className="block text-sm font-semibold text-gray-700 mb-2">Country</label>
                  <input type="text" name="country" value={locationForm.country} onChange={handleLocationFormChange} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required />
                </div>
                {locationForm.error && <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-2 rounded-lg">{locationForm.error}</div>}
                {locationForm.success && <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-2 rounded-lg">{locationForm.success}</div>}
                <div className="flex gap-4 pt-2">
                  <button type="submit" className="flex-1 bg-[#cd7e0f] text-white py-3 rounded-lg font-semibold hover:bg-[#cd7e0f]/90 transition disabled:opacity-50 disabled:cursor-not-allowed" disabled={locationForm.submitting}>
                    {locationForm.submitting ? (editLocation ? 'Updating...' : 'Adding...') : (editLocation ? 'Update Location' : 'Add Location')}
                  </button>
                  <button type="button" className="flex-1 bg-gray-200 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-300 transition" onClick={() => { setShowLocationModal(false); setEditLocation(null); setLocationForm({ city: '', country: '', error: '', success: '', submitting: false }); }}>
                    Cancel
                  </button>
                </div>
              </form>
            </div>
          </div>
        )}
        {/* End of main content */}

        {/* Crypto Wallets Modal */}
        {showWalletModal && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50">
            <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-lg relative flex flex-col">
              <button
                className="absolute top-4 right-4 text-gray-400 hover:text-[#cd7e0f] text-3xl font-bold focus:outline-none"
                onClick={() => setShowWalletModal(false)}
                aria-label="Close"
              >
                &times;
              </button>
              <h2 className="text-2xl font-bold text-[#4f1032] mb-6 text-center">Add Crypto Wallet</h2>
              <form onSubmit={handleAddWallet} className="space-y-5 mb-8">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Wallet Name</label>
                    <input type="text" value={newWallet.name} onChange={e => setNewWallet({ ...newWallet, name: e.target.value })} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required />
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Wallet Address</label>
                    <input type="text" value={newWallet.address} onChange={e => setNewWallet({ ...newWallet, address: e.target.value })} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required />
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">Network</label>
                    <input type="text" value={newWallet.network} onChange={e => setNewWallet({ ...newWallet, network: e.target.value })} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition text-gray-900" required />
                  </div>
                  <div>
                    <label className="block text-sm font-semibold text-gray-700 mb-2">QR Code</label>
                    <input type="file" accept="image/*" onChange={e => setQrFile(e.target.files?.[0] || null)} className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-[#cd7e0f] focus:border-[#cd7e0f] transition" required />
                  </div>
                </div>
                {walletError && <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-2 rounded-lg">{walletError}</div>}
                {walletSuccess && <div className="bg-green-50 border border-green-200 text-green-700 px-4 py-2 rounded-lg">{walletSuccess}</div>}
                <div className="flex gap-4 pt-2">
                  <button type="submit" className="flex-1 bg-[#cd7e0f] text-white py-3 rounded-lg font-semibold hover:bg-[#cd7e0f]/90 transition disabled:opacity-50 disabled:cursor-not-allowed" disabled={walletLoading}>
                    {walletLoading ? 'Adding...' : 'Add Wallet'}
                  </button>
                  <button type="button" className="flex-1 bg-gray-200 text-gray-700 py-3 rounded-lg font-semibold hover:bg-gray-300 transition" onClick={() => setShowWalletModal(false)}>
                    Cancel
                  </button>
                </div>
              </form>
              <h3 className="font-semibold text-lg mb-4 text-[#4f1032]">Existing Wallets</h3>
              <div className="space-y-2 max-h-40 overflow-y-auto">
                {cryptoWallets.length === 0 ? (
                  <div className="text-gray-500">No wallets added yet.</div>
                ) : (
                  cryptoWallets.map(wallet => (
                    <div key={wallet.id} className="border rounded-lg p-3 flex flex-col bg-gray-50">
                      <span className="font-bold text-[#4f1032]">{wallet.name}</span>
                      <span className="text-xs text-gray-600">Network: {wallet.network}</span>
                      <span className="text-xs text-gray-600 break-all">Address: {wallet.address || wallet.wallet_address}</span>
                      {wallet.qr_code_url && (
                        <img src={wallet.qr_code_url} alt="QR Code" className="w-16 h-16 object-contain mt-1" />
                      )}
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        )}

        {/* Flight Details Modal */}
        {showFlightModal && selectedFlight && (
          <div className="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40">
            <div className="bg-white rounded-xl shadow-2xl p-8 w-full max-w-lg relative">
              <button
                className="absolute top-3 right-3 text-gray-500 hover:text-gray-700 text-2xl font-bold"
                onClick={() => setShowFlightModal(false)}
                aria-label="Close"
              >
                &times;
              </button>
              <h2 className="text-2xl font-bold text-[#4f1032] mb-4">Flight Details</h2>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Flight Number:</span>
                  <span className="text-gray-900">{selectedFlight.flight_number || selectedFlight.id}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Airline:</span>
                  <span className="text-gray-900">{selectedFlight.airline_name || selectedFlight.airline_id}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Departure:</span>
                  <span className="text-gray-900">{selectedFlight.departure_country || selectedFlight.departure_location || '-'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Arrival:</span>
                  <span className="text-gray-900">{selectedFlight.arrival_country || selectedFlight.arrival_location || '-'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Date:</span>
                  <span className="text-gray-900">{selectedFlight.date || '-'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Time:</span>
                  <span className="text-gray-900">{selectedFlight.time || '-'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Price:</span>
                  <span className="text-gray-900">{formatPrice(selectedFlight.price)}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Status:</span>
                  <span className="text-gray-900">{selectedFlight.status || '-'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Tracking Number:</span>
                  <span className="text-gray-900">{selectedFlight.tracking_number || '-'}</span>
                </div>
                <div className="flex justify-between">
                  <span className="font-semibold text-gray-700">Passenger Name:</span>
                  <span className="text-gray-900">{selectedFlight.passenger_name || '-'}</span>
                </div>
              </div>
            </div>
          </div>
        )}
    </div>
  );
}
